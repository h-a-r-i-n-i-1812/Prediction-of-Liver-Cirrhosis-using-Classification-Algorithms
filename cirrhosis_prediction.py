# -*- coding: utf-8 -*-
"""CIRRHOSIS PREDICTION

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gktiYLns0XzKEsZ0EO1hiQvfrVBiTgDB
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.metrics import confusion_matrix, accuracy_score, roc_curve, classification_report
from sklearn.feature_selection import SelectKBest
from sklearn.feature_selection import chi2

from tqdm import tqdm
import os

os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'

import warnings
warnings.filterwarnings("ignore")

file = pd.read_csv("cirrhosis.csv")
file = file.dropna()
file.head()

file.describe()

file.describe().transpose().style.background_gradient(cmap = 'GnBu')

#Box plot
plt.figure(figsize=(10, 6))
sns.boxplot(data=file)
plt.title('Box Plot of Features')
plt.xticks(rotation=45)
plt.show()

# Scatter plot
plt.figure(figsize=(10, 6))
sns.scatterplot(x='Age', y='Bilirubin', data=file, hue='Stage')
plt.title('Scatter Plot of Age vs Bilirubin with Stage')
plt.show()

# Histogram
plt.figure(figsize=(10, 6))
sns.histplot(data=file['Age'], bins=20, kde=True)
plt.title('Histogram of Age')
plt.show()

# Pie chart
plt.figure(figsize=(8, 8))
file['Stage'].value_counts().plot(kind='pie', autopct='%1.1f%%', colors=['skyblue', 'lightgreen', 'coral', 'lightyellow'])
plt.title('Pie Chart of Stage Distribution')
plt.ylabel('')
plt.show()

file.drop(['ID'], axis = 1, inplace = True)
#Converting Values from Days to Years in "Age" Column
file["Age"] = (file["Age"] / 365)
file["Age"] = file["Age"].astype("int64")
data = file.iloc[:, :len(file.columns) - 1]
labels = file.iloc[:, len(file.columns)-1]
class_names = labels.unique()

numeric_file = file.select_dtypes(include=[np.number])

plt.figure(figsize=(10, 10))
sns.heatmap(numeric_file.corr(), cmap="RdBu", annot=True)
plt.show()

# Assuming 'data' contains your features and 'labels' contains your target labels
data = pd.get_dummies(data)

# Feature Selection
best = SelectKBest(score_func=chi2, k=6)
fit = best.fit(data, labels)

# Get selected feature indices
selected_indices = fit.get_support(indices=True)

# Get the names of selected features
selected_features = data.columns[selected_indices]

print("Selected Features:")
print(selected_features)

# Train the logistic regression model
lor_model = LogisticRegression(random_state=1, max_iter=1000)
lor_model.fit(x_train, y_train)

# Predict the test set
lor_pred = lor_model.predict(x_test)

# Compute the confusion matrix
lor_cm = confusion_matrix(y_test, lor_pred)

# Print the classification report
print(f"Classification Report of Logistic Regression: \n {classification_report(y_test, lor_pred)}")

# Print the accuracy score separately
accuracy = accuracy_score(y_test, lor_pred)
print(f"Accuracy of Logistic Regression: {accuracy:.4f}")

# Plot the confusion matrix heatmap
print(f"Confusion Matrix of Logistic Regression: \n")
sns.heatmap(lor_cm, cmap='Blues', annot=True, xticklabels=class_names, yticklabels=class_names)
plt.show()

# Train the KNN model
knn_model = KNeighborsClassifier(n_neighbors=3)
knn_model.fit(x_train, y_train)

# Predict the test set
knn_pred = knn_model.predict(x_test)

# Compute the confusion matrix
knn_cm = confusion_matrix(y_test, knn_pred)

# Print the classification report
print(f"Classification Report of KNN: \n {classification_report(y_test, knn_pred)}")

# Print the accuracy score separately
accuracy = accuracy_score(y_test, knn_pred)
print(f"Accuracy of KNN: {accuracy:.4f}")

# Plot the confusion matrix heatmap
print(f"Confusion Matrix of KNN: \n")
sns.heatmap(knn_cm, cmap='Blues', annot=True, xticklabels=class_names, yticklabels=class_names)
plt.show()

# Random Forest Classifier
rf_model = RandomForestClassifier(n_estimators=200, random_state=0, max_depth=12)
rf_model.fit(x_train, y_train)

rf_pred = rf_model.predict(x_test)
rf_cm = confusion_matrix(y_test, rf_pred)

print(f"Classification Report of Random Forest Classifier: \n {classification_report(y_test, rf_pred)}")

# Compute and print accuracy for Random Forest Classifier
rf_accuracy = accuracy_score(y_test, rf_pred)
print(f"Accuracy of Random Forest Classifier: {rf_accuracy:.4f}")

print(f"Confusion Matrix of Random Forest Classifier: \n")
sns.heatmap(rf_cm, cmap='Blues', annot=True, xticklabels=class_names, yticklabels=class_names)
plt.show()

# SVM
svm_model = SVC()
svm_model.fit(x_train, y_train)

svm_pred = svm_model.predict(x_test)
svm_cm = confusion_matrix(y_test, svm_pred)

print(f"Classification Report of SVM: \n {classification_report(y_test, svm_pred)}")

# Compute and print accuracy for SVM
svm_accuracy = accuracy_score(y_test, svm_pred)
print(f"Accuracy of SVM: {svm_accuracy:.4f}")

print(f"Confusion Matrix of SVM: \n")
sns.heatmap(svm_cm, cmap='Blues', annot=True, xticklabels=class_names, yticklabels=class_names)
plt.show()